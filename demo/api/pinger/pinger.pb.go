// Code generated by protoc-gen-go. DO NOT EDIT.
// source: api/pinger/pinger.proto

package pinger

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type PingRequest struct {
	Message              string   `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PingRequest) Reset()         { *m = PingRequest{} }
func (m *PingRequest) String() string { return proto.CompactTextString(m) }
func (*PingRequest) ProtoMessage()    {}
func (*PingRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_pinger_cd3fb1e3a6ae37a2, []int{0}
}
func (m *PingRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PingRequest.Unmarshal(m, b)
}
func (m *PingRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PingRequest.Marshal(b, m, deterministic)
}
func (dst *PingRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PingRequest.Merge(dst, src)
}
func (m *PingRequest) XXX_Size() int {
	return xxx_messageInfo_PingRequest.Size(m)
}
func (m *PingRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PingRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PingRequest proto.InternalMessageInfo

func (m *PingRequest) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type PingReply struct {
	Message              string   `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PingReply) Reset()         { *m = PingReply{} }
func (m *PingReply) String() string { return proto.CompactTextString(m) }
func (*PingReply) ProtoMessage()    {}
func (*PingReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_pinger_cd3fb1e3a6ae37a2, []int{1}
}
func (m *PingReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PingReply.Unmarshal(m, b)
}
func (m *PingReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PingReply.Marshal(b, m, deterministic)
}
func (dst *PingReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PingReply.Merge(dst, src)
}
func (m *PingReply) XXX_Size() int {
	return xxx_messageInfo_PingReply.Size(m)
}
func (m *PingReply) XXX_DiscardUnknown() {
	xxx_messageInfo_PingReply.DiscardUnknown(m)
}

var xxx_messageInfo_PingReply proto.InternalMessageInfo

func (m *PingReply) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type StreamRequest struct {
	Message              string   `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StreamRequest) Reset()         { *m = StreamRequest{} }
func (m *StreamRequest) String() string { return proto.CompactTextString(m) }
func (*StreamRequest) ProtoMessage()    {}
func (*StreamRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_pinger_cd3fb1e3a6ae37a2, []int{2}
}
func (m *StreamRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StreamRequest.Unmarshal(m, b)
}
func (m *StreamRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StreamRequest.Marshal(b, m, deterministic)
}
func (dst *StreamRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StreamRequest.Merge(dst, src)
}
func (m *StreamRequest) XXX_Size() int {
	return xxx_messageInfo_StreamRequest.Size(m)
}
func (m *StreamRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_StreamRequest.DiscardUnknown(m)
}

var xxx_messageInfo_StreamRequest proto.InternalMessageInfo

func (m *StreamRequest) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type StreamReply struct {
	Message              string   `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StreamReply) Reset()         { *m = StreamReply{} }
func (m *StreamReply) String() string { return proto.CompactTextString(m) }
func (*StreamReply) ProtoMessage()    {}
func (*StreamReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_pinger_cd3fb1e3a6ae37a2, []int{3}
}
func (m *StreamReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StreamReply.Unmarshal(m, b)
}
func (m *StreamReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StreamReply.Marshal(b, m, deterministic)
}
func (dst *StreamReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StreamReply.Merge(dst, src)
}
func (m *StreamReply) XXX_Size() int {
	return xxx_messageInfo_StreamReply.Size(m)
}
func (m *StreamReply) XXX_DiscardUnknown() {
	xxx_messageInfo_StreamReply.DiscardUnknown(m)
}

var xxx_messageInfo_StreamReply proto.InternalMessageInfo

func (m *StreamReply) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func init() {
	proto.RegisterType((*PingRequest)(nil), "pinger.PingRequest")
	proto.RegisterType((*PingReply)(nil), "pinger.PingReply")
	proto.RegisterType((*StreamRequest)(nil), "pinger.StreamRequest")
	proto.RegisterType((*StreamReply)(nil), "pinger.StreamReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// PingerClient is the client API for Pinger service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PingerClient interface {
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingReply, error)
	ServerStream(ctx context.Context, in *StreamRequest, opts ...grpc.CallOption) (Pinger_ServerStreamClient, error)
	ClientStream(ctx context.Context, opts ...grpc.CallOption) (Pinger_ClientStreamClient, error)
	BidiStream(ctx context.Context, opts ...grpc.CallOption) (Pinger_BidiStreamClient, error)
}

type pingerClient struct {
	cc *grpc.ClientConn
}

func NewPingerClient(cc *grpc.ClientConn) PingerClient {
	return &pingerClient{cc}
}

func (c *pingerClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingReply, error) {
	out := new(PingReply)
	err := c.cc.Invoke(ctx, "/pinger.Pinger/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pingerClient) ServerStream(ctx context.Context, in *StreamRequest, opts ...grpc.CallOption) (Pinger_ServerStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Pinger_serviceDesc.Streams[0], "/pinger.Pinger/ServerStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &pingerServerStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Pinger_ServerStreamClient interface {
	Recv() (*StreamReply, error)
	grpc.ClientStream
}

type pingerServerStreamClient struct {
	grpc.ClientStream
}

func (x *pingerServerStreamClient) Recv() (*StreamReply, error) {
	m := new(StreamReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *pingerClient) ClientStream(ctx context.Context, opts ...grpc.CallOption) (Pinger_ClientStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Pinger_serviceDesc.Streams[1], "/pinger.Pinger/ClientStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &pingerClientStreamClient{stream}
	return x, nil
}

type Pinger_ClientStreamClient interface {
	Send(*StreamRequest) error
	CloseAndRecv() (*StreamReply, error)
	grpc.ClientStream
}

type pingerClientStreamClient struct {
	grpc.ClientStream
}

func (x *pingerClientStreamClient) Send(m *StreamRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *pingerClientStreamClient) CloseAndRecv() (*StreamReply, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(StreamReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *pingerClient) BidiStream(ctx context.Context, opts ...grpc.CallOption) (Pinger_BidiStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Pinger_serviceDesc.Streams[2], "/pinger.Pinger/BidiStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &pingerBidiStreamClient{stream}
	return x, nil
}

type Pinger_BidiStreamClient interface {
	Send(*StreamRequest) error
	Recv() (*StreamReply, error)
	grpc.ClientStream
}

type pingerBidiStreamClient struct {
	grpc.ClientStream
}

func (x *pingerBidiStreamClient) Send(m *StreamRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *pingerBidiStreamClient) Recv() (*StreamReply, error) {
	m := new(StreamReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PingerServer is the server API for Pinger service.
type PingerServer interface {
	Ping(context.Context, *PingRequest) (*PingReply, error)
	ServerStream(*StreamRequest, Pinger_ServerStreamServer) error
	ClientStream(Pinger_ClientStreamServer) error
	BidiStream(Pinger_BidiStreamServer) error
}

func RegisterPingerServer(s *grpc.Server, srv PingerServer) {
	s.RegisterService(&_Pinger_serviceDesc, srv)
}

func _Pinger_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PingerServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pinger.Pinger/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PingerServer).Ping(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pinger_ServerStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PingerServer).ServerStream(m, &pingerServerStreamServer{stream})
}

type Pinger_ServerStreamServer interface {
	Send(*StreamReply) error
	grpc.ServerStream
}

type pingerServerStreamServer struct {
	grpc.ServerStream
}

func (x *pingerServerStreamServer) Send(m *StreamReply) error {
	return x.ServerStream.SendMsg(m)
}

func _Pinger_ClientStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PingerServer).ClientStream(&pingerClientStreamServer{stream})
}

type Pinger_ClientStreamServer interface {
	SendAndClose(*StreamReply) error
	Recv() (*StreamRequest, error)
	grpc.ServerStream
}

type pingerClientStreamServer struct {
	grpc.ServerStream
}

func (x *pingerClientStreamServer) SendAndClose(m *StreamReply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *pingerClientStreamServer) Recv() (*StreamRequest, error) {
	m := new(StreamRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Pinger_BidiStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PingerServer).BidiStream(&pingerBidiStreamServer{stream})
}

type Pinger_BidiStreamServer interface {
	Send(*StreamReply) error
	Recv() (*StreamRequest, error)
	grpc.ServerStream
}

type pingerBidiStreamServer struct {
	grpc.ServerStream
}

func (x *pingerBidiStreamServer) Send(m *StreamReply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *pingerBidiStreamServer) Recv() (*StreamRequest, error) {
	m := new(StreamRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Pinger_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pinger.Pinger",
	HandlerType: (*PingerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _Pinger_Ping_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ServerStream",
			Handler:       _Pinger_ServerStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ClientStream",
			Handler:       _Pinger_ClientStream_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "BidiStream",
			Handler:       _Pinger_BidiStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "api/pinger/pinger.proto",
}

func init() { proto.RegisterFile("api/pinger/pinger.proto", fileDescriptor_pinger_cd3fb1e3a6ae37a2) }

var fileDescriptor_pinger_cd3fb1e3a6ae37a2 = []byte{
	// 198 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x4f, 0x2c, 0xc8, 0xd4,
	0x2f, 0xc8, 0xcc, 0x4b, 0x4f, 0x2d, 0x82, 0x52, 0x7a, 0x05, 0x45, 0xf9, 0x25, 0xf9, 0x42, 0x6c,
	0x10, 0x9e, 0x92, 0x3a, 0x17, 0x77, 0x40, 0x66, 0x5e, 0x7a, 0x50, 0x6a, 0x61, 0x69, 0x6a, 0x71,
	0x89, 0x90, 0x04, 0x17, 0x7b, 0x6e, 0x6a, 0x71, 0x71, 0x62, 0x7a, 0xaa, 0x04, 0xa3, 0x02, 0xa3,
	0x06, 0x67, 0x10, 0x8c, 0xab, 0xa4, 0xca, 0xc5, 0x09, 0x51, 0x58, 0x90, 0x53, 0x89, 0x47, 0x99,
	0x26, 0x17, 0x6f, 0x70, 0x49, 0x51, 0x6a, 0x62, 0x2e, 0x61, 0x13, 0xd5, 0xb9, 0xb8, 0x61, 0x4a,
	0xf1, 0x9a, 0x69, 0xf4, 0x8b, 0x91, 0x8b, 0x2d, 0x00, 0xec, 0x5c, 0x21, 0x03, 0x2e, 0x16, 0x10,
	0x4b, 0x48, 0x58, 0x0f, 0xea, 0x1b, 0x24, 0xc7, 0x4b, 0x09, 0xa2, 0x0a, 0x16, 0xe4, 0x54, 0x2a,
	0x31, 0x08, 0xd9, 0x71, 0xf1, 0x04, 0xa7, 0x16, 0x95, 0xa5, 0x16, 0x41, 0xec, 0x12, 0x12, 0x85,
	0x29, 0x42, 0x71, 0xa6, 0x94, 0x30, 0xba, 0x30, 0x58, 0xb7, 0x01, 0x23, 0x48, 0xbf, 0x73, 0x4e,
	0x66, 0x6a, 0x5e, 0x09, 0x39, 0xfa, 0x35, 0x40, 0xfa, 0xb9, 0x9c, 0x32, 0x53, 0x32, 0xc9, 0xd3,
	0x6d, 0xc0, 0x98, 0xc4, 0x06, 0x8e, 0x2f, 0x63, 0x40, 0x00, 0x00, 0x00, 0xff, 0xff, 0x63, 0x06,
	0xf6, 0x20, 0xca, 0x01, 0x00, 0x00,
}
